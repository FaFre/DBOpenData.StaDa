/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test StationsGet
        /// </summary>
        [Fact]
        public void StationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? offset = null;
            //long? limit = null;
            //string searchstring = null;
            //string category = null;
            //string federalstate = null;
            //long? eva = null;
            //string ril = null;
            //string logicaloperator = null;
            //var response = instance.StationsGet(offset, limit, searchstring, category, federalstate, eva, ril, logicaloperator);
            //Assert.IsType<StationQuery> (response, "response is StationQuery");
        }
        
        /// <summary>
        /// Test StationsIdGet
        /// </summary>
        [Fact]
        public void StationsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.StationsIdGet(id);
            //Assert.IsType<StationQuery> (response, "response is StationQuery");
        }
        
        /// <summary>
        /// Test SzentralenGet
        /// </summary>
        [Fact]
        public void SzentralenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? offset = null;
            //long? limit = null;
            //var response = instance.SzentralenGet(offset, limit);
            //Assert.IsType<SZentraleQuery> (response, "response is SZentraleQuery");
        }
        
        /// <summary>
        /// Test SzentralenIdGet
        /// </summary>
        [Fact]
        public void SzentralenIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.SzentralenIdGet(id);
            //Assert.IsType<SZentraleQuery> (response, "response is SZentraleQuery");
        }
        
    }

}
