/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StationQuery
    /// </summary>
    [DataContract]
    public partial class StationQuery :  IEquatable<StationQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StationQuery" /> class.
        /// </summary>
        /// <param name="offset">offset of the first result object with respect to the total number  of hits produced by the query.</param>
        /// <param name="limit">maximum number of result objects to be returned.</param>
        /// <param name="total">total number of hits produced by that query.</param>
        /// <param name="result">result objects produced by that query.</param>
        public StationQuery(long offset = default(long), long limit = default(long), long total = default(long), List<Station> result = default(List<Station>))
        {
            this.Offset = offset;
            this.Limit = limit;
            this.Total = total;
            this.Result = result;
        }
        
        /// <summary>
        /// offset of the first result object with respect to the total number  of hits produced by the query
        /// </summary>
        /// <value>offset of the first result object with respect to the total number  of hits produced by the query</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public long Offset { get; set; }

        /// <summary>
        /// maximum number of result objects to be returned
        /// </summary>
        /// <value>maximum number of result objects to be returned</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public long Limit { get; set; }

        /// <summary>
        /// total number of hits produced by that query
        /// </summary>
        /// <value>total number of hits produced by that query</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public long Total { get; set; }

        /// <summary>
        /// result objects produced by that query
        /// </summary>
        /// <value>result objects produced by that query</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public List<Station> Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StationQuery {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StationQuery);
        }

        /// <summary>
        /// Returns true if StationQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of StationQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StationQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result != null &&
                    input.Result != null &&
                    this.Result.SequenceEqual(input.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Offset.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
