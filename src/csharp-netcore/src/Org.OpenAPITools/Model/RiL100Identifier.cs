/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RiL100Identifier
    /// </summary>
    [DataContract]
    public partial class RiL100Identifier :  IEquatable<RiL100Identifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiL100Identifier" /> class.
        /// </summary>
        /// <param name="rilIdentifier">Unique identifier of &#39;Betriebsstelle&#39; according to Ril100.</param>
        /// <param name="isMain">is stations main Ril100. Determination of Station&amp;Service AG.</param>
        /// <param name="hasSteamPermission">permission for steam engines y/n.</param>
        /// <param name="geographicCoordinate">geographicCoordinate.</param>
        public RiL100Identifier(string rilIdentifier = default(string), bool isMain = default(bool), bool hasSteamPermission = default(bool), GeographicPoint geographicCoordinate = default(GeographicPoint))
        {
            this.RilIdentifier = rilIdentifier;
            this.IsMain = isMain;
            this.HasSteamPermission = hasSteamPermission;
            this.GeographicCoordinate = geographicCoordinate;
        }
        
        /// <summary>
        /// Unique identifier of &#39;Betriebsstelle&#39; according to Ril100
        /// </summary>
        /// <value>Unique identifier of &#39;Betriebsstelle&#39; according to Ril100</value>
        [DataMember(Name="rilIdentifier", EmitDefaultValue=false)]
        public string RilIdentifier { get; set; }

        /// <summary>
        /// is stations main Ril100. Determination of Station&amp;Service AG
        /// </summary>
        /// <value>is stations main Ril100. Determination of Station&amp;Service AG</value>
        [DataMember(Name="isMain", EmitDefaultValue=false)]
        public bool IsMain { get; set; }

        /// <summary>
        /// permission for steam engines y/n
        /// </summary>
        /// <value>permission for steam engines y/n</value>
        [DataMember(Name="hasSteamPermission", EmitDefaultValue=false)]
        public bool HasSteamPermission { get; set; }

        /// <summary>
        /// Gets or Sets GeographicCoordinate
        /// </summary>
        [DataMember(Name="geographicCoordinate", EmitDefaultValue=false)]
        public GeographicPoint GeographicCoordinate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiL100Identifier {\n");
            sb.Append("  RilIdentifier: ").Append(RilIdentifier).Append("\n");
            sb.Append("  IsMain: ").Append(IsMain).Append("\n");
            sb.Append("  HasSteamPermission: ").Append(HasSteamPermission).Append("\n");
            sb.Append("  GeographicCoordinate: ").Append(GeographicCoordinate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiL100Identifier);
        }

        /// <summary>
        /// Returns true if RiL100Identifier instances are equal
        /// </summary>
        /// <param name="input">Instance of RiL100Identifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiL100Identifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RilIdentifier == input.RilIdentifier ||
                    (this.RilIdentifier != null &&
                    this.RilIdentifier.Equals(input.RilIdentifier))
                ) && 
                (
                    this.IsMain == input.IsMain ||
                    this.IsMain.Equals(input.IsMain)
                ) && 
                (
                    this.HasSteamPermission == input.HasSteamPermission ||
                    this.HasSteamPermission.Equals(input.HasSteamPermission)
                ) && 
                (
                    this.GeographicCoordinate == input.GeographicCoordinate ||
                    (this.GeographicCoordinate != null &&
                    this.GeographicCoordinate.Equals(input.GeographicCoordinate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RilIdentifier != null)
                    hashCode = hashCode * 59 + this.RilIdentifier.GetHashCode();
                hashCode = hashCode * 59 + this.IsMain.GetHashCode();
                hashCode = hashCode * 59 + this.HasSteamPermission.GetHashCode();
                if (this.GeographicCoordinate != null)
                    hashCode = hashCode * 59 + this.GeographicCoordinate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
