/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EVANumber
    /// </summary>
    [DataContract]
    public partial class EVANumber :  IEquatable<EVANumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EVANumber" /> class.
        /// </summary>
        /// <param name="number">EVA identifier.</param>
        /// <param name="isMain">station related EVA-Numbers.</param>
        /// <param name="geographicCoordinate">geographicCoordinate.</param>
        public EVANumber(int number = default(int), bool isMain = default(bool), GeographicPoint geographicCoordinate = default(GeographicPoint))
        {
            this.Number = number;
            this.IsMain = isMain;
            this.GeographicCoordinate = geographicCoordinate;
        }
        
        /// <summary>
        /// EVA identifier
        /// </summary>
        /// <value>EVA identifier</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int Number { get; set; }

        /// <summary>
        /// station related EVA-Numbers
        /// </summary>
        /// <value>station related EVA-Numbers</value>
        [DataMember(Name="isMain", EmitDefaultValue=false)]
        public bool IsMain { get; set; }

        /// <summary>
        /// Gets or Sets GeographicCoordinate
        /// </summary>
        [DataMember(Name="geographicCoordinate", EmitDefaultValue=false)]
        public GeographicPoint GeographicCoordinate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EVANumber {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  IsMain: ").Append(IsMain).Append("\n");
            sb.Append("  GeographicCoordinate: ").Append(GeographicCoordinate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EVANumber);
        }

        /// <summary>
        /// Returns true if EVANumber instances are equal
        /// </summary>
        /// <param name="input">Instance of EVANumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EVANumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.IsMain == input.IsMain ||
                    this.IsMain.Equals(input.IsMain)
                ) && 
                (
                    this.GeographicCoordinate == input.GeographicCoordinate ||
                    (this.GeographicCoordinate != null &&
                    this.GeographicCoordinate.Equals(input.GeographicCoordinate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Number.GetHashCode();
                hashCode = hashCode * 59 + this.IsMain.GetHashCode();
                if (this.GeographicCoordinate != null)
                    hashCode = hashCode * 59 + this.GeographicCoordinate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
