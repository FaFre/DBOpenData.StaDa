/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// 3-S-Zentralen are 7/24 hours operating centers for german railway stations
    /// </summary>
    [DataContract]
    public partial class SZentrale :  IEquatable<SZentrale>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SZentrale" /> class.
        /// </summary>
        /// <param name="number">unique identifier for SZentrale.</param>
        /// <param name="name">unique identifier of 3SZentrale.</param>
        /// <param name="publicPhoneNumber">publicPhoneNumber.</param>
        /// <param name="address">address.</param>
        /// <param name="publicFaxNumber">public fax number.</param>
        /// <param name="internalPhoneNumber">internal phone number.</param>
        /// <param name="internalFaxNumber">internal fax number.</param>
        /// <param name="mobilePhoneNumber">mobile phone number (no longer supported!).</param>
        /// <param name="email">email adress of the 3-S-Zentrale (no longer supported!).</param>
        public SZentrale(int number = default(int), string name = default(string), string publicPhoneNumber = default(string), Address address = default(Address), string publicFaxNumber = default(string), string internalPhoneNumber = default(string), string internalFaxNumber = default(string), string mobilePhoneNumber = default(string), string email = default(string))
        {
            this.Number = number;
            this.Name = name;
            this.PublicPhoneNumber = publicPhoneNumber;
            this.Address = address;
            this.PublicFaxNumber = publicFaxNumber;
            this.InternalPhoneNumber = internalPhoneNumber;
            this.InternalFaxNumber = internalFaxNumber;
            this.MobilePhoneNumber = mobilePhoneNumber;
            this.Email = email;
        }
        
        /// <summary>
        /// unique identifier for SZentrale
        /// </summary>
        /// <value>unique identifier for SZentrale</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int Number { get; set; }

        /// <summary>
        /// unique identifier of 3SZentrale
        /// </summary>
        /// <value>unique identifier of 3SZentrale</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PublicPhoneNumber
        /// </summary>
        [DataMember(Name="publicPhoneNumber", EmitDefaultValue=false)]
        public string PublicPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// public fax number
        /// </summary>
        /// <value>public fax number</value>
        [DataMember(Name="publicFaxNumber", EmitDefaultValue=false)]
        public string PublicFaxNumber { get; set; }

        /// <summary>
        /// internal phone number
        /// </summary>
        /// <value>internal phone number</value>
        [DataMember(Name="internalPhoneNumber", EmitDefaultValue=false)]
        public string InternalPhoneNumber { get; set; }

        /// <summary>
        /// internal fax number
        /// </summary>
        /// <value>internal fax number</value>
        [DataMember(Name="internalFaxNumber", EmitDefaultValue=false)]
        public string InternalFaxNumber { get; set; }

        /// <summary>
        /// mobile phone number (no longer supported!)
        /// </summary>
        /// <value>mobile phone number (no longer supported!)</value>
        [DataMember(Name="mobilePhoneNumber", EmitDefaultValue=false)]
        public string MobilePhoneNumber { get; set; }

        /// <summary>
        /// email adress of the 3-S-Zentrale (no longer supported!)
        /// </summary>
        /// <value>email adress of the 3-S-Zentrale (no longer supported!)</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SZentrale {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicPhoneNumber: ").Append(PublicPhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PublicFaxNumber: ").Append(PublicFaxNumber).Append("\n");
            sb.Append("  InternalPhoneNumber: ").Append(InternalPhoneNumber).Append("\n");
            sb.Append("  InternalFaxNumber: ").Append(InternalFaxNumber).Append("\n");
            sb.Append("  MobilePhoneNumber: ").Append(MobilePhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SZentrale);
        }

        /// <summary>
        /// Returns true if SZentrale instances are equal
        /// </summary>
        /// <param name="input">Instance of SZentrale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SZentrale input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PublicPhoneNumber == input.PublicPhoneNumber ||
                    (this.PublicPhoneNumber != null &&
                    this.PublicPhoneNumber.Equals(input.PublicPhoneNumber))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PublicFaxNumber == input.PublicFaxNumber ||
                    (this.PublicFaxNumber != null &&
                    this.PublicFaxNumber.Equals(input.PublicFaxNumber))
                ) && 
                (
                    this.InternalPhoneNumber == input.InternalPhoneNumber ||
                    (this.InternalPhoneNumber != null &&
                    this.InternalPhoneNumber.Equals(input.InternalPhoneNumber))
                ) && 
                (
                    this.InternalFaxNumber == input.InternalFaxNumber ||
                    (this.InternalFaxNumber != null &&
                    this.InternalFaxNumber.Equals(input.InternalFaxNumber))
                ) && 
                (
                    this.MobilePhoneNumber == input.MobilePhoneNumber ||
                    (this.MobilePhoneNumber != null &&
                    this.MobilePhoneNumber.Equals(input.MobilePhoneNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PublicPhoneNumber != null)
                    hashCode = hashCode * 59 + this.PublicPhoneNumber.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PublicFaxNumber != null)
                    hashCode = hashCode * 59 + this.PublicFaxNumber.GetHashCode();
                if (this.InternalPhoneNumber != null)
                    hashCode = hashCode * 59 + this.InternalPhoneNumber.GetHashCode();
                if (this.InternalFaxNumber != null)
                    hashCode = hashCode * 59 + this.InternalFaxNumber.GetHashCode();
                if (this.MobilePhoneNumber != null)
                    hashCode = hashCode * 59 + this.MobilePhoneNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
