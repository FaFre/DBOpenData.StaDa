/* 
 * Stationsdatenbereitstellung
 *
 * An API providing master data for German railway stations by DB Station&Service AG.
 *
 * The version of the OpenAPI document: 2.2.01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GEOJSON object of type point. By default WGS84 is the coordinate system in GEOJSON.
    /// </summary>
    [DataContract]
    public partial class GeographicPoint :  IEquatable<GeographicPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeographicPoint" /> class.
        /// </summary>
        /// <param name="type">the type of the GEOJSON Object e.g. point. Currently only point coordinates without altitude are provided..</param>
        /// <param name="coordinates">first value is longitude, second latitude third altitude (currently not provided).</param>
        public GeographicPoint(string type = default(string), List<double> coordinates = default(List<double>))
        {
            this.Type = type;
            this.Coordinates = coordinates;
        }
        
        /// <summary>
        /// the type of the GEOJSON Object e.g. point. Currently only point coordinates without altitude are provided.
        /// </summary>
        /// <value>the type of the GEOJSON Object e.g. point. Currently only point coordinates without altitude are provided.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// first value is longitude, second latitude third altitude (currently not provided)
        /// </summary>
        /// <value>first value is longitude, second latitude third altitude (currently not provided)</value>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public List<double> Coordinates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeographicPoint {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeographicPoint);
        }

        /// <summary>
        /// Returns true if GeographicPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of GeographicPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeographicPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    this.Coordinates != null &&
                    input.Coordinates != null &&
                    this.Coordinates.SequenceEqual(input.Coordinates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
